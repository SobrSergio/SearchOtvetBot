from aiogram import types, Dispatcher
from create_bot import bot
from states.create_states import *
from aiogram.dispatcher import FSMContext
from functions.search_otvet import searchotvet
from functions.imagetotext import text_recognition
from keyboard.client_buttons import *
import os 


async def back_kb_image(message, state): #—Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑—Ä–∞—â–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é 
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) #—É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è üè° –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await bot.send_message(message.chat.id, 'üè° –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!', reply_markup=main_kb) #–æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –≤–æ–∑—Ä–∞—Ç–µ –≤ –º–µ–Ω—é
    await state.finish()
    
    
    
    
     
async def set_request_question(message: types.Message, state: FSMContext):
    
    if message.text == 'üè° –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':  #–≤–æ–∑—Ä–∞—â–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é 
        await back_kb_image(message, state)
        return
    

    await bot.send_message(message.chat.id, '–ü–æ–¥–æ–∂–¥–∏—Ç–µ üîÑ...')
    
    list_otvet = searchotvet(message.text) #–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
    
    if len(list_otvet) < 5: 
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id + 1)
        await message.answer('‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
        
    else:
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id + 1)
        await message.answer(f"""
–í–æ—Ç —Å–∞–π—Ç—ã —Å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å! ‚úâÔ∏è
                             
<a href="{list_otvet[0]}">–û—Ç–≤–µ—Ç-1</a>

<a href="{list_otvet[1]}">–û—Ç–≤–µ—Ç-2</a>

<a href="{list_otvet[2]}">–û—Ç–≤–µ—Ç-3</a>

<a href="{list_otvet[3]}">–û—Ç–≤–µ—Ç-4</a>

<a href="{list_otvet[4]}">–û—Ç–≤–µ—Ç-5</a>
                         """, parse_mode='HTML', reply_markup=main_kb)
    await state.finish()





async def set_request_question_image(message: types.Message, state: FSMContext):
    if message.text == 'üè° –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é': #–≤–æ–∑—Ä–∞—â–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é 
        await back_kb_image(message, state)
        return
    if not message.photo: 
        await bot.send_message(message.chat.id, '–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!')
    else:
        await bot.send_message(message.chat.id, '–ü–æ–¥–æ–∂–¥–∏—Ç–µ üîÑ...')
        file_info = await bot.get_file(message.photo[-1].file_id) #–±–µ—Ä–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
        file_name = file_info.file_path.split('photos/')[1] #–±–µ—Ä–µ–º –µ–≥–æ –∏–º—è
        await message.photo[-1].download(destination_file=f'image/{file_name}') #–∫–∞—á–∞–µ–º —Ñ–∞–π–ª –≤ –Ω–∞—à –ø—Ä–æ–µ–∫—Ç 
        
        file_text = text_recognition(f'image/{file_name}') #–ø–µ—Ä–µ–≤–æ–¥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç (—Å–ø–∏—Å–æ–∫)
        myString = ' '.join(file_text) #—Å–ø–∏—Å–æ–∫ –≤ —Å—Ç—Ä–æ–∫—É
        print(file_text) #----------------------------------------------------------------------------------------------------------------------------------------------
        list_otvet = searchotvet(myString) #–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
        
        if len(list_otvet) < 5:
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id + 1)
            await bot.send_message(message.chat.id, '‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
            
        else:
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id + 1)
            await bot.send_message(message.chat.id, f"""                      
–í–æ—Ç —Å–∞–π—Ç—ã —Å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å! ‚úâÔ∏è
                                    
<a href="{list_otvet[0]}">–û—Ç–≤–µ—Ç-1</a>

<a href="{list_otvet[1]}">–û—Ç–≤–µ—Ç-2</a>

<a href="{list_otvet[2]}">–û—Ç–≤–µ—Ç-3</a>

<a href="{list_otvet[3]}">–û—Ç–≤–µ—Ç-4</a>

<a href="{list_otvet[4]}">–û—Ç–≤–µ—Ç-5</a>""", parse_mode='HTML', reply_markup=main_kb)
            
        if(os.path.isfile(f"image/{file_name}")): #—É–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
            os.remove(f"image/{file_name}")
            
        await state.finish()






def register_states_client(dp: Dispatcher): #–¥–∏—Å–ø–µ—Ç—á–µ—Ä
    
    dp.register_message_handler(set_request_question, state=RequestQuestion.text)
    dp.register_message_handler(set_request_question_image, state=RequestQuestion_image.image, content_types=['photo', 'text']) #content_types = —á—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—è
    