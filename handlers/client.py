from aiogram import types, Dispatcher
from create_bot import bot
from keyboard.client_buttons import *
from states.create_states import *
from keyboard.client_inline_buttons import *



async def default_commands(message: types.Message): #—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    if message.text == '/start':
        await bot.send_message(message.chat.id, f"""–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!
ü§ñSearchOtvetBot  -  –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–∫–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –ø–æ –≤—Å–µ–º—É –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –ø–æ —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç—É! 

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ —ç—Ç–∏—Ö –∫–Ω–æ–ø–æ–∫üëá:
        
üì∏ –ü–æ–∏—Å–∫ –ø–æ —Ñ–æ—Ç–æ  -  –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–æ—Ç—É –∏ –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à—É –∑–∞–¥–∞—á—É! –ü–æ–∏—Å–∫ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ –≤—Å–µ–º—É –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.

üìù –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É  -  –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –±–æ—Ç—É –∏ –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à—É –∑–∞–¥–∞—á—É! –ü–æ–∏—Å–∫ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ –≤—Å–µ–º—É –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.


–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: @SergeyManakhimov
(–î–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:  üÜò –ü–æ–º–æ—â—å)""", parse_mode='HTML', reply_markup=main_kb)





async def main_kb_handler(message: types.Message): #–æ—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    
    if message.text == 'üì∏ –ü–æ–∏—Å–∫ –ø–æ —Ñ–æ—Ç–æ':
        await bot.send_message(message.chat.id, """–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –∑–∞–¥–∞—á–∏! üì™
                               
–ß–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–µ–µ —Ñ–æ—Ç–æ, —Ç–µ–º –ª—É—á—à–µ –±—É–¥–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç""", reply_markup=back_kb)
        await RequestQuestion_image.image.set()
        
        
    if message.text == 'üìù –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É':
        await bot.send_message(message.chat.id, """–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏! üì™
                               
–ü—Ä–∏–º–µ—Ä:  –í —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–µ ABC —É–≥–æ–ª C —Ä–∞–≤–µ–Ω 90¬∞, AC = 4,8, sinA = 7/25, –ù–∞–π–¥–∏—Ç–µ AB""", reply_markup=back_kb)
        
        await RequestQuestion.text.set()
        
        
    if message.text == 'üÜò –ü–æ–º–æ—â—å':
        await bot.send_message(message.chat.id, """
–í—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏üßë‚Äçüíª:

Telegram - @SergeyManakhimov,
Email - sergeymanakhimov@gmail.com
Instagram - @sergey_manakhimov""")


# async def znanija_handler(message: types.Message):
#     await bot.send_message(message.chat.id, """‚ö°Ô∏è Znanija
# –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤""", reply_markup=Znanija_frame) 



# async def otvetmail_handler(message: types.Message):
#         await bot.send_message(message.chat.id, """üìß Otvet.mail
# –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤""", reply_markup=Otvetmail_frame) 




def register_message(dp: Dispatcher):  #—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
    
    dp.register_message_handler(default_commands, commands=['start', 'help'])
    
    dp.register_message_handler(main_kb_handler, lambda message: (message.text == 'üì∏ –ü–æ–∏—Å–∫ –ø–æ —Ñ–æ—Ç–æ' or message.text == 'üìù –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É' or message.text == 'üÜò –ü–æ–º–æ—â—å'), state = None)
    
    # dp.register_message_handler(znanija_handler, lambda message: (message.text == '‚ö°Ô∏è Znanija'))
    
    # dp.register_message_handler(otvetmail_handler, lambda message: (message.text == 'üìß Otvet.mail'))